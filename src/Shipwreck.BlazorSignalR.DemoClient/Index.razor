@page "/"
@using Shipwreck.BlazorSignalR
@using Shipwreck.BlazorSignalR.DemoModels

<div>
    <button type="button" @onclick="@Connect">
        Connect
    </button>
    <button type="button" @onclick="@Disconnect">
        Disconnect
    </button>
    <input type="text" @bind="clientName" />
    <input type="number" @bind="count" min="1" step="1" />
    <button type="button"
            @onclick="@Ping">
        Ping
    </button>
    <button type="button"
            @onclick="@Calculate">
        Calc
    </button>
</div>
<textarea @bind="log"
          style="width: 100%; resize:vertical;" rows="30"></textarea>
@code
{
    [Inject]
    public IJSRuntime JS { get; set; }

    private BlazorSignalRConnection _Connection;
    private BlazorSignalRHubProxy _Proxy;

    string clientName = "Blazor";
    int count = 10;
    string log;

    void Append(string l)
    {
        log = l + "\r\n" + log;
        StateHasChanged();
    }

    async Task Connect()
    {
        try
        {
            _Connection?.Dispose();
            _Connection = new BlazorSignalRConnection()
            {
                JS = JS,
                Url = "http://localhost:61705/signalr",
            };
            _Proxy = _Connection.CreateHubProxy("pingpong");
            _Proxy.On("Connected", (string cid) => Append(cid + " Connected"));
            _Proxy.On("Pong", (string clientName, DateTimeOffset timestamp)
                => Append($"Pong from [{clientName}]@[{timestamp}]"));
            _Proxy.On("Disconnected", (DisconnectedArgs args) => Append($"{args.ConnectionId } Disconnected({args.StopCalled})@{args.Timestamp}"));
            Append("Starting..");
            await _Connection.Start();
            Append("Started");
        }
        catch (Exception ex)
        {
            Append("Exception caught: " + ex);
        }
    }

    async Task Disconnect()
    {
        try
        {
            var c = _Connection;
            _Connection = null;
            _Proxy = null;
            if (c != null)
            {
                Append("Stopping..");
                await c.Stop();
                Append("Stopped");
            }
        }
        catch (Exception ex)
        {
            Append("Exception caught: " + ex);
        }
    }

    async Task Ping()
    {
        try
        {
            var p = _Proxy;
            if (p != null)
            {
                Append("Pinging..");
                var r = await p.Invoke<int>("Ping", clientName, count);
                Append("Ping completed: " + r);
            }
        }
        catch (Exception ex)
        {
            Append("Exception caught: " + ex);
        }
    }
    async Task Calculate()
    {
        try
        {
            var p = _Proxy;
            if (p != null)
            {
                Append("Calculating..");
                var r = await p.Invoke<CalculateResult>("Calculate", new CalculateArgs() { ClientName = clientName, Count = count });
                Append("Calculated: " + r.Value);
            }
        }
        catch (Exception ex)
        {
            Append("Exception caught: " + ex);
        }
    }
}